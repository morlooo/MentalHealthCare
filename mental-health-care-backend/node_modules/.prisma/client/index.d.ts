
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model usermaster
 * 
 */
export type usermaster = $Result.DefaultSelection<Prisma.$usermasterPayload>
/**
 * Model formdatamaster
 * 
 */
export type formdatamaster = $Result.DefaultSelection<Prisma.$formdatamasterPayload>
/**
 * Model rolemaster
 * 
 */
export type rolemaster = $Result.DefaultSelection<Prisma.$rolemasterPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usermasters
 * const usermasters = await prisma.usermaster.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usermasters
   * const usermasters = await prisma.usermaster.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usermaster`: Exposes CRUD operations for the **usermaster** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usermasters
    * const usermasters = await prisma.usermaster.findMany()
    * ```
    */
  get usermaster(): Prisma.usermasterDelegate<ExtArgs>;

  /**
   * `prisma.formdatamaster`: Exposes CRUD operations for the **formdatamaster** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Formdatamasters
    * const formdatamasters = await prisma.formdatamaster.findMany()
    * ```
    */
  get formdatamaster(): Prisma.formdatamasterDelegate<ExtArgs>;

  /**
   * `prisma.rolemaster`: Exposes CRUD operations for the **rolemaster** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rolemasters
    * const rolemasters = await prisma.rolemaster.findMany()
    * ```
    */
  get rolemaster(): Prisma.rolemasterDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    usermaster: 'usermaster',
    formdatamaster: 'formdatamaster',
    rolemaster: 'rolemaster'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "usermaster" | "formdatamaster" | "rolemaster"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      usermaster: {
        payload: Prisma.$usermasterPayload<ExtArgs>
        fields: Prisma.usermasterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usermasterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usermasterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usermasterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usermasterPayload>
          }
          findFirst: {
            args: Prisma.usermasterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usermasterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usermasterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usermasterPayload>
          }
          findMany: {
            args: Prisma.usermasterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usermasterPayload>[]
          }
          create: {
            args: Prisma.usermasterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usermasterPayload>
          }
          createMany: {
            args: Prisma.usermasterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.usermasterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usermasterPayload>[]
          }
          delete: {
            args: Prisma.usermasterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usermasterPayload>
          }
          update: {
            args: Prisma.usermasterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usermasterPayload>
          }
          deleteMany: {
            args: Prisma.usermasterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usermasterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.usermasterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usermasterPayload>
          }
          aggregate: {
            args: Prisma.UsermasterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsermaster>
          }
          groupBy: {
            args: Prisma.usermasterGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsermasterGroupByOutputType>[]
          }
          count: {
            args: Prisma.usermasterCountArgs<ExtArgs>
            result: $Utils.Optional<UsermasterCountAggregateOutputType> | number
          }
        }
      }
      formdatamaster: {
        payload: Prisma.$formdatamasterPayload<ExtArgs>
        fields: Prisma.formdatamasterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.formdatamasterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$formdatamasterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.formdatamasterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$formdatamasterPayload>
          }
          findFirst: {
            args: Prisma.formdatamasterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$formdatamasterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.formdatamasterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$formdatamasterPayload>
          }
          findMany: {
            args: Prisma.formdatamasterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$formdatamasterPayload>[]
          }
          create: {
            args: Prisma.formdatamasterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$formdatamasterPayload>
          }
          createMany: {
            args: Prisma.formdatamasterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.formdatamasterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$formdatamasterPayload>[]
          }
          delete: {
            args: Prisma.formdatamasterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$formdatamasterPayload>
          }
          update: {
            args: Prisma.formdatamasterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$formdatamasterPayload>
          }
          deleteMany: {
            args: Prisma.formdatamasterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.formdatamasterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.formdatamasterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$formdatamasterPayload>
          }
          aggregate: {
            args: Prisma.FormdatamasterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFormdatamaster>
          }
          groupBy: {
            args: Prisma.formdatamasterGroupByArgs<ExtArgs>
            result: $Utils.Optional<FormdatamasterGroupByOutputType>[]
          }
          count: {
            args: Prisma.formdatamasterCountArgs<ExtArgs>
            result: $Utils.Optional<FormdatamasterCountAggregateOutputType> | number
          }
        }
      }
      rolemaster: {
        payload: Prisma.$rolemasterPayload<ExtArgs>
        fields: Prisma.rolemasterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.rolemasterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolemasterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.rolemasterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolemasterPayload>
          }
          findFirst: {
            args: Prisma.rolemasterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolemasterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.rolemasterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolemasterPayload>
          }
          findMany: {
            args: Prisma.rolemasterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolemasterPayload>[]
          }
          create: {
            args: Prisma.rolemasterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolemasterPayload>
          }
          createMany: {
            args: Prisma.rolemasterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.rolemasterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolemasterPayload>[]
          }
          delete: {
            args: Prisma.rolemasterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolemasterPayload>
          }
          update: {
            args: Prisma.rolemasterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolemasterPayload>
          }
          deleteMany: {
            args: Prisma.rolemasterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.rolemasterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.rolemasterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolemasterPayload>
          }
          aggregate: {
            args: Prisma.RolemasterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRolemaster>
          }
          groupBy: {
            args: Prisma.rolemasterGroupByArgs<ExtArgs>
            result: $Utils.Optional<RolemasterGroupByOutputType>[]
          }
          count: {
            args: Prisma.rolemasterCountArgs<ExtArgs>
            result: $Utils.Optional<RolemasterCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsermasterCountOutputType
   */

  export type UsermasterCountOutputType = {
    formdatamaster: number
  }

  export type UsermasterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    formdatamaster?: boolean | UsermasterCountOutputTypeCountFormdatamasterArgs
  }

  // Custom InputTypes
  /**
   * UsermasterCountOutputType without action
   */
  export type UsermasterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsermasterCountOutputType
     */
    select?: UsermasterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsermasterCountOutputType without action
   */
  export type UsermasterCountOutputTypeCountFormdatamasterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: formdatamasterWhereInput
  }


  /**
   * Count Type RolemasterCountOutputType
   */

  export type RolemasterCountOutputType = {
    usermaster: number
  }

  export type RolemasterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usermaster?: boolean | RolemasterCountOutputTypeCountUsermasterArgs
  }

  // Custom InputTypes
  /**
   * RolemasterCountOutputType without action
   */
  export type RolemasterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolemasterCountOutputType
     */
    select?: RolemasterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RolemasterCountOutputType without action
   */
  export type RolemasterCountOutputTypeCountUsermasterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usermasterWhereInput
  }


  /**
   * Models
   */

  /**
   * Model usermaster
   */

  export type AggregateUsermaster = {
    _count: UsermasterCountAggregateOutputType | null
    _avg: UsermasterAvgAggregateOutputType | null
    _sum: UsermasterSumAggregateOutputType | null
    _min: UsermasterMinAggregateOutputType | null
    _max: UsermasterMaxAggregateOutputType | null
  }

  export type UsermasterAvgAggregateOutputType = {
    id: number | null
  }

  export type UsermasterSumAggregateOutputType = {
    id: number | null
  }

  export type UsermasterMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    created_at: Date | null
    updated_at: Date | null
    role_id: string | null
  }

  export type UsermasterMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    created_at: Date | null
    updated_at: Date | null
    role_id: string | null
  }

  export type UsermasterCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    created_at: number
    updated_at: number
    role_id: number
    _all: number
  }


  export type UsermasterAvgAggregateInputType = {
    id?: true
  }

  export type UsermasterSumAggregateInputType = {
    id?: true
  }

  export type UsermasterMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    created_at?: true
    updated_at?: true
    role_id?: true
  }

  export type UsermasterMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    created_at?: true
    updated_at?: true
    role_id?: true
  }

  export type UsermasterCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    created_at?: true
    updated_at?: true
    role_id?: true
    _all?: true
  }

  export type UsermasterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usermaster to aggregate.
     */
    where?: usermasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usermasters to fetch.
     */
    orderBy?: usermasterOrderByWithRelationInput | usermasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usermasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usermasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usermasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usermasters
    **/
    _count?: true | UsermasterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsermasterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsermasterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsermasterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsermasterMaxAggregateInputType
  }

  export type GetUsermasterAggregateType<T extends UsermasterAggregateArgs> = {
        [P in keyof T & keyof AggregateUsermaster]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsermaster[P]>
      : GetScalarType<T[P], AggregateUsermaster[P]>
  }




  export type usermasterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usermasterWhereInput
    orderBy?: usermasterOrderByWithAggregationInput | usermasterOrderByWithAggregationInput[]
    by: UsermasterScalarFieldEnum[] | UsermasterScalarFieldEnum
    having?: usermasterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsermasterCountAggregateInputType | true
    _avg?: UsermasterAvgAggregateInputType
    _sum?: UsermasterSumAggregateInputType
    _min?: UsermasterMinAggregateInputType
    _max?: UsermasterMaxAggregateInputType
  }

  export type UsermasterGroupByOutputType = {
    id: number
    email: string
    password: string
    name: string
    created_at: Date | null
    updated_at: Date | null
    role_id: string | null
    _count: UsermasterCountAggregateOutputType | null
    _avg: UsermasterAvgAggregateOutputType | null
    _sum: UsermasterSumAggregateOutputType | null
    _min: UsermasterMinAggregateOutputType | null
    _max: UsermasterMaxAggregateOutputType | null
  }

  type GetUsermasterGroupByPayload<T extends usermasterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsermasterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsermasterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsermasterGroupByOutputType[P]>
            : GetScalarType<T[P], UsermasterGroupByOutputType[P]>
        }
      >
    >


  export type usermasterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    created_at?: boolean
    updated_at?: boolean
    role_id?: boolean
    formdatamaster?: boolean | usermaster$formdatamasterArgs<ExtArgs>
    rolemaster?: boolean | usermaster$rolemasterArgs<ExtArgs>
    _count?: boolean | UsermasterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usermaster"]>

  export type usermasterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    created_at?: boolean
    updated_at?: boolean
    role_id?: boolean
    rolemaster?: boolean | usermaster$rolemasterArgs<ExtArgs>
  }, ExtArgs["result"]["usermaster"]>

  export type usermasterSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    created_at?: boolean
    updated_at?: boolean
    role_id?: boolean
  }

  export type usermasterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    formdatamaster?: boolean | usermaster$formdatamasterArgs<ExtArgs>
    rolemaster?: boolean | usermaster$rolemasterArgs<ExtArgs>
    _count?: boolean | UsermasterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type usermasterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rolemaster?: boolean | usermaster$rolemasterArgs<ExtArgs>
  }

  export type $usermasterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "usermaster"
    objects: {
      formdatamaster: Prisma.$formdatamasterPayload<ExtArgs>[]
      rolemaster: Prisma.$rolemasterPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      name: string
      created_at: Date | null
      updated_at: Date | null
      role_id: string | null
    }, ExtArgs["result"]["usermaster"]>
    composites: {}
  }

  type usermasterGetPayload<S extends boolean | null | undefined | usermasterDefaultArgs> = $Result.GetResult<Prisma.$usermasterPayload, S>

  type usermasterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usermasterFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsermasterCountAggregateInputType | true
    }

  export interface usermasterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['usermaster'], meta: { name: 'usermaster' } }
    /**
     * Find zero or one Usermaster that matches the filter.
     * @param {usermasterFindUniqueArgs} args - Arguments to find a Usermaster
     * @example
     * // Get one Usermaster
     * const usermaster = await prisma.usermaster.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usermasterFindUniqueArgs>(args: SelectSubset<T, usermasterFindUniqueArgs<ExtArgs>>): Prisma__usermasterClient<$Result.GetResult<Prisma.$usermasterPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Usermaster that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {usermasterFindUniqueOrThrowArgs} args - Arguments to find a Usermaster
     * @example
     * // Get one Usermaster
     * const usermaster = await prisma.usermaster.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usermasterFindUniqueOrThrowArgs>(args: SelectSubset<T, usermasterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usermasterClient<$Result.GetResult<Prisma.$usermasterPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Usermaster that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usermasterFindFirstArgs} args - Arguments to find a Usermaster
     * @example
     * // Get one Usermaster
     * const usermaster = await prisma.usermaster.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usermasterFindFirstArgs>(args?: SelectSubset<T, usermasterFindFirstArgs<ExtArgs>>): Prisma__usermasterClient<$Result.GetResult<Prisma.$usermasterPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Usermaster that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usermasterFindFirstOrThrowArgs} args - Arguments to find a Usermaster
     * @example
     * // Get one Usermaster
     * const usermaster = await prisma.usermaster.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usermasterFindFirstOrThrowArgs>(args?: SelectSubset<T, usermasterFindFirstOrThrowArgs<ExtArgs>>): Prisma__usermasterClient<$Result.GetResult<Prisma.$usermasterPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Usermasters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usermasterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usermasters
     * const usermasters = await prisma.usermaster.findMany()
     * 
     * // Get first 10 Usermasters
     * const usermasters = await prisma.usermaster.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usermasterWithIdOnly = await prisma.usermaster.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usermasterFindManyArgs>(args?: SelectSubset<T, usermasterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usermasterPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Usermaster.
     * @param {usermasterCreateArgs} args - Arguments to create a Usermaster.
     * @example
     * // Create one Usermaster
     * const Usermaster = await prisma.usermaster.create({
     *   data: {
     *     // ... data to create a Usermaster
     *   }
     * })
     * 
     */
    create<T extends usermasterCreateArgs>(args: SelectSubset<T, usermasterCreateArgs<ExtArgs>>): Prisma__usermasterClient<$Result.GetResult<Prisma.$usermasterPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Usermasters.
     * @param {usermasterCreateManyArgs} args - Arguments to create many Usermasters.
     * @example
     * // Create many Usermasters
     * const usermaster = await prisma.usermaster.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usermasterCreateManyArgs>(args?: SelectSubset<T, usermasterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usermasters and returns the data saved in the database.
     * @param {usermasterCreateManyAndReturnArgs} args - Arguments to create many Usermasters.
     * @example
     * // Create many Usermasters
     * const usermaster = await prisma.usermaster.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usermasters and only return the `id`
     * const usermasterWithIdOnly = await prisma.usermaster.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends usermasterCreateManyAndReturnArgs>(args?: SelectSubset<T, usermasterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usermasterPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Usermaster.
     * @param {usermasterDeleteArgs} args - Arguments to delete one Usermaster.
     * @example
     * // Delete one Usermaster
     * const Usermaster = await prisma.usermaster.delete({
     *   where: {
     *     // ... filter to delete one Usermaster
     *   }
     * })
     * 
     */
    delete<T extends usermasterDeleteArgs>(args: SelectSubset<T, usermasterDeleteArgs<ExtArgs>>): Prisma__usermasterClient<$Result.GetResult<Prisma.$usermasterPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Usermaster.
     * @param {usermasterUpdateArgs} args - Arguments to update one Usermaster.
     * @example
     * // Update one Usermaster
     * const usermaster = await prisma.usermaster.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usermasterUpdateArgs>(args: SelectSubset<T, usermasterUpdateArgs<ExtArgs>>): Prisma__usermasterClient<$Result.GetResult<Prisma.$usermasterPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Usermasters.
     * @param {usermasterDeleteManyArgs} args - Arguments to filter Usermasters to delete.
     * @example
     * // Delete a few Usermasters
     * const { count } = await prisma.usermaster.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usermasterDeleteManyArgs>(args?: SelectSubset<T, usermasterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usermasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usermasterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usermasters
     * const usermaster = await prisma.usermaster.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usermasterUpdateManyArgs>(args: SelectSubset<T, usermasterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usermaster.
     * @param {usermasterUpsertArgs} args - Arguments to update or create a Usermaster.
     * @example
     * // Update or create a Usermaster
     * const usermaster = await prisma.usermaster.upsert({
     *   create: {
     *     // ... data to create a Usermaster
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usermaster we want to update
     *   }
     * })
     */
    upsert<T extends usermasterUpsertArgs>(args: SelectSubset<T, usermasterUpsertArgs<ExtArgs>>): Prisma__usermasterClient<$Result.GetResult<Prisma.$usermasterPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Usermasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usermasterCountArgs} args - Arguments to filter Usermasters to count.
     * @example
     * // Count the number of Usermasters
     * const count = await prisma.usermaster.count({
     *   where: {
     *     // ... the filter for the Usermasters we want to count
     *   }
     * })
    **/
    count<T extends usermasterCountArgs>(
      args?: Subset<T, usermasterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsermasterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usermaster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsermasterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsermasterAggregateArgs>(args: Subset<T, UsermasterAggregateArgs>): Prisma.PrismaPromise<GetUsermasterAggregateType<T>>

    /**
     * Group by Usermaster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usermasterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usermasterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usermasterGroupByArgs['orderBy'] }
        : { orderBy?: usermasterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usermasterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsermasterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the usermaster model
   */
  readonly fields: usermasterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for usermaster.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usermasterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    formdatamaster<T extends usermaster$formdatamasterArgs<ExtArgs> = {}>(args?: Subset<T, usermaster$formdatamasterArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$formdatamasterPayload<ExtArgs>, T, "findMany"> | Null>
    rolemaster<T extends usermaster$rolemasterArgs<ExtArgs> = {}>(args?: Subset<T, usermaster$rolemasterArgs<ExtArgs>>): Prisma__rolemasterClient<$Result.GetResult<Prisma.$rolemasterPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the usermaster model
   */ 
  interface usermasterFieldRefs {
    readonly id: FieldRef<"usermaster", 'Int'>
    readonly email: FieldRef<"usermaster", 'String'>
    readonly password: FieldRef<"usermaster", 'String'>
    readonly name: FieldRef<"usermaster", 'String'>
    readonly created_at: FieldRef<"usermaster", 'DateTime'>
    readonly updated_at: FieldRef<"usermaster", 'DateTime'>
    readonly role_id: FieldRef<"usermaster", 'String'>
  }
    

  // Custom InputTypes
  /**
   * usermaster findUnique
   */
  export type usermasterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usermaster
     */
    select?: usermasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usermasterInclude<ExtArgs> | null
    /**
     * Filter, which usermaster to fetch.
     */
    where: usermasterWhereUniqueInput
  }

  /**
   * usermaster findUniqueOrThrow
   */
  export type usermasterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usermaster
     */
    select?: usermasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usermasterInclude<ExtArgs> | null
    /**
     * Filter, which usermaster to fetch.
     */
    where: usermasterWhereUniqueInput
  }

  /**
   * usermaster findFirst
   */
  export type usermasterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usermaster
     */
    select?: usermasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usermasterInclude<ExtArgs> | null
    /**
     * Filter, which usermaster to fetch.
     */
    where?: usermasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usermasters to fetch.
     */
    orderBy?: usermasterOrderByWithRelationInput | usermasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usermasters.
     */
    cursor?: usermasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usermasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usermasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usermasters.
     */
    distinct?: UsermasterScalarFieldEnum | UsermasterScalarFieldEnum[]
  }

  /**
   * usermaster findFirstOrThrow
   */
  export type usermasterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usermaster
     */
    select?: usermasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usermasterInclude<ExtArgs> | null
    /**
     * Filter, which usermaster to fetch.
     */
    where?: usermasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usermasters to fetch.
     */
    orderBy?: usermasterOrderByWithRelationInput | usermasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usermasters.
     */
    cursor?: usermasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usermasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usermasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usermasters.
     */
    distinct?: UsermasterScalarFieldEnum | UsermasterScalarFieldEnum[]
  }

  /**
   * usermaster findMany
   */
  export type usermasterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usermaster
     */
    select?: usermasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usermasterInclude<ExtArgs> | null
    /**
     * Filter, which usermasters to fetch.
     */
    where?: usermasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usermasters to fetch.
     */
    orderBy?: usermasterOrderByWithRelationInput | usermasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usermasters.
     */
    cursor?: usermasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usermasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usermasters.
     */
    skip?: number
    distinct?: UsermasterScalarFieldEnum | UsermasterScalarFieldEnum[]
  }

  /**
   * usermaster create
   */
  export type usermasterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usermaster
     */
    select?: usermasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usermasterInclude<ExtArgs> | null
    /**
     * The data needed to create a usermaster.
     */
    data: XOR<usermasterCreateInput, usermasterUncheckedCreateInput>
  }

  /**
   * usermaster createMany
   */
  export type usermasterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many usermasters.
     */
    data: usermasterCreateManyInput | usermasterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * usermaster createManyAndReturn
   */
  export type usermasterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usermaster
     */
    select?: usermasterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many usermasters.
     */
    data: usermasterCreateManyInput | usermasterCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usermasterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * usermaster update
   */
  export type usermasterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usermaster
     */
    select?: usermasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usermasterInclude<ExtArgs> | null
    /**
     * The data needed to update a usermaster.
     */
    data: XOR<usermasterUpdateInput, usermasterUncheckedUpdateInput>
    /**
     * Choose, which usermaster to update.
     */
    where: usermasterWhereUniqueInput
  }

  /**
   * usermaster updateMany
   */
  export type usermasterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update usermasters.
     */
    data: XOR<usermasterUpdateManyMutationInput, usermasterUncheckedUpdateManyInput>
    /**
     * Filter which usermasters to update
     */
    where?: usermasterWhereInput
  }

  /**
   * usermaster upsert
   */
  export type usermasterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usermaster
     */
    select?: usermasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usermasterInclude<ExtArgs> | null
    /**
     * The filter to search for the usermaster to update in case it exists.
     */
    where: usermasterWhereUniqueInput
    /**
     * In case the usermaster found by the `where` argument doesn't exist, create a new usermaster with this data.
     */
    create: XOR<usermasterCreateInput, usermasterUncheckedCreateInput>
    /**
     * In case the usermaster was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usermasterUpdateInput, usermasterUncheckedUpdateInput>
  }

  /**
   * usermaster delete
   */
  export type usermasterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usermaster
     */
    select?: usermasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usermasterInclude<ExtArgs> | null
    /**
     * Filter which usermaster to delete.
     */
    where: usermasterWhereUniqueInput
  }

  /**
   * usermaster deleteMany
   */
  export type usermasterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usermasters to delete
     */
    where?: usermasterWhereInput
  }

  /**
   * usermaster.formdatamaster
   */
  export type usermaster$formdatamasterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the formdatamaster
     */
    select?: formdatamasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: formdatamasterInclude<ExtArgs> | null
    where?: formdatamasterWhereInput
    orderBy?: formdatamasterOrderByWithRelationInput | formdatamasterOrderByWithRelationInput[]
    cursor?: formdatamasterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FormdatamasterScalarFieldEnum | FormdatamasterScalarFieldEnum[]
  }

  /**
   * usermaster.rolemaster
   */
  export type usermaster$rolemasterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rolemaster
     */
    select?: rolemasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolemasterInclude<ExtArgs> | null
    where?: rolemasterWhereInput
  }

  /**
   * usermaster without action
   */
  export type usermasterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usermaster
     */
    select?: usermasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usermasterInclude<ExtArgs> | null
  }


  /**
   * Model formdatamaster
   */

  export type AggregateFormdatamaster = {
    _count: FormdatamasterCountAggregateOutputType | null
    _avg: FormdatamasterAvgAggregateOutputType | null
    _sum: FormdatamasterSumAggregateOutputType | null
    _min: FormdatamasterMinAggregateOutputType | null
    _max: FormdatamasterMaxAggregateOutputType | null
  }

  export type FormdatamasterAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    current_stress_level: number | null
    health_status: number | null
  }

  export type FormdatamasterSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    current_stress_level: number | null
    health_status: number | null
  }

  export type FormdatamasterMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    feelings: string | null
    current_mood: string | null
    current_stress_level: number | null
    created_at: Date | null
    updated_at: Date | null
    health_status: number | null
  }

  export type FormdatamasterMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    feelings: string | null
    current_mood: string | null
    current_stress_level: number | null
    created_at: Date | null
    updated_at: Date | null
    health_status: number | null
  }

  export type FormdatamasterCountAggregateOutputType = {
    id: number
    user_id: number
    feelings: number
    current_mood: number
    current_stress_level: number
    created_at: number
    updated_at: number
    health_status: number
    _all: number
  }


  export type FormdatamasterAvgAggregateInputType = {
    id?: true
    user_id?: true
    current_stress_level?: true
    health_status?: true
  }

  export type FormdatamasterSumAggregateInputType = {
    id?: true
    user_id?: true
    current_stress_level?: true
    health_status?: true
  }

  export type FormdatamasterMinAggregateInputType = {
    id?: true
    user_id?: true
    feelings?: true
    current_mood?: true
    current_stress_level?: true
    created_at?: true
    updated_at?: true
    health_status?: true
  }

  export type FormdatamasterMaxAggregateInputType = {
    id?: true
    user_id?: true
    feelings?: true
    current_mood?: true
    current_stress_level?: true
    created_at?: true
    updated_at?: true
    health_status?: true
  }

  export type FormdatamasterCountAggregateInputType = {
    id?: true
    user_id?: true
    feelings?: true
    current_mood?: true
    current_stress_level?: true
    created_at?: true
    updated_at?: true
    health_status?: true
    _all?: true
  }

  export type FormdatamasterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which formdatamaster to aggregate.
     */
    where?: formdatamasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of formdatamasters to fetch.
     */
    orderBy?: formdatamasterOrderByWithRelationInput | formdatamasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: formdatamasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` formdatamasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` formdatamasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned formdatamasters
    **/
    _count?: true | FormdatamasterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FormdatamasterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FormdatamasterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FormdatamasterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FormdatamasterMaxAggregateInputType
  }

  export type GetFormdatamasterAggregateType<T extends FormdatamasterAggregateArgs> = {
        [P in keyof T & keyof AggregateFormdatamaster]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFormdatamaster[P]>
      : GetScalarType<T[P], AggregateFormdatamaster[P]>
  }




  export type formdatamasterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: formdatamasterWhereInput
    orderBy?: formdatamasterOrderByWithAggregationInput | formdatamasterOrderByWithAggregationInput[]
    by: FormdatamasterScalarFieldEnum[] | FormdatamasterScalarFieldEnum
    having?: formdatamasterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FormdatamasterCountAggregateInputType | true
    _avg?: FormdatamasterAvgAggregateInputType
    _sum?: FormdatamasterSumAggregateInputType
    _min?: FormdatamasterMinAggregateInputType
    _max?: FormdatamasterMaxAggregateInputType
  }

  export type FormdatamasterGroupByOutputType = {
    id: number
    user_id: number | null
    feelings: string
    current_mood: string
    current_stress_level: number
    created_at: Date | null
    updated_at: Date | null
    health_status: number | null
    _count: FormdatamasterCountAggregateOutputType | null
    _avg: FormdatamasterAvgAggregateOutputType | null
    _sum: FormdatamasterSumAggregateOutputType | null
    _min: FormdatamasterMinAggregateOutputType | null
    _max: FormdatamasterMaxAggregateOutputType | null
  }

  type GetFormdatamasterGroupByPayload<T extends formdatamasterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FormdatamasterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FormdatamasterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FormdatamasterGroupByOutputType[P]>
            : GetScalarType<T[P], FormdatamasterGroupByOutputType[P]>
        }
      >
    >


  export type formdatamasterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    feelings?: boolean
    current_mood?: boolean
    current_stress_level?: boolean
    created_at?: boolean
    updated_at?: boolean
    health_status?: boolean
    usermaster?: boolean | formdatamaster$usermasterArgs<ExtArgs>
  }, ExtArgs["result"]["formdatamaster"]>

  export type formdatamasterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    feelings?: boolean
    current_mood?: boolean
    current_stress_level?: boolean
    created_at?: boolean
    updated_at?: boolean
    health_status?: boolean
    usermaster?: boolean | formdatamaster$usermasterArgs<ExtArgs>
  }, ExtArgs["result"]["formdatamaster"]>

  export type formdatamasterSelectScalar = {
    id?: boolean
    user_id?: boolean
    feelings?: boolean
    current_mood?: boolean
    current_stress_level?: boolean
    created_at?: boolean
    updated_at?: boolean
    health_status?: boolean
  }

  export type formdatamasterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usermaster?: boolean | formdatamaster$usermasterArgs<ExtArgs>
  }
  export type formdatamasterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usermaster?: boolean | formdatamaster$usermasterArgs<ExtArgs>
  }

  export type $formdatamasterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "formdatamaster"
    objects: {
      usermaster: Prisma.$usermasterPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number | null
      feelings: string
      current_mood: string
      current_stress_level: number
      created_at: Date | null
      updated_at: Date | null
      health_status: number | null
    }, ExtArgs["result"]["formdatamaster"]>
    composites: {}
  }

  type formdatamasterGetPayload<S extends boolean | null | undefined | formdatamasterDefaultArgs> = $Result.GetResult<Prisma.$formdatamasterPayload, S>

  type formdatamasterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<formdatamasterFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FormdatamasterCountAggregateInputType | true
    }

  export interface formdatamasterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['formdatamaster'], meta: { name: 'formdatamaster' } }
    /**
     * Find zero or one Formdatamaster that matches the filter.
     * @param {formdatamasterFindUniqueArgs} args - Arguments to find a Formdatamaster
     * @example
     * // Get one Formdatamaster
     * const formdatamaster = await prisma.formdatamaster.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends formdatamasterFindUniqueArgs>(args: SelectSubset<T, formdatamasterFindUniqueArgs<ExtArgs>>): Prisma__formdatamasterClient<$Result.GetResult<Prisma.$formdatamasterPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Formdatamaster that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {formdatamasterFindUniqueOrThrowArgs} args - Arguments to find a Formdatamaster
     * @example
     * // Get one Formdatamaster
     * const formdatamaster = await prisma.formdatamaster.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends formdatamasterFindUniqueOrThrowArgs>(args: SelectSubset<T, formdatamasterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__formdatamasterClient<$Result.GetResult<Prisma.$formdatamasterPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Formdatamaster that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {formdatamasterFindFirstArgs} args - Arguments to find a Formdatamaster
     * @example
     * // Get one Formdatamaster
     * const formdatamaster = await prisma.formdatamaster.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends formdatamasterFindFirstArgs>(args?: SelectSubset<T, formdatamasterFindFirstArgs<ExtArgs>>): Prisma__formdatamasterClient<$Result.GetResult<Prisma.$formdatamasterPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Formdatamaster that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {formdatamasterFindFirstOrThrowArgs} args - Arguments to find a Formdatamaster
     * @example
     * // Get one Formdatamaster
     * const formdatamaster = await prisma.formdatamaster.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends formdatamasterFindFirstOrThrowArgs>(args?: SelectSubset<T, formdatamasterFindFirstOrThrowArgs<ExtArgs>>): Prisma__formdatamasterClient<$Result.GetResult<Prisma.$formdatamasterPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Formdatamasters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {formdatamasterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Formdatamasters
     * const formdatamasters = await prisma.formdatamaster.findMany()
     * 
     * // Get first 10 Formdatamasters
     * const formdatamasters = await prisma.formdatamaster.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const formdatamasterWithIdOnly = await prisma.formdatamaster.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends formdatamasterFindManyArgs>(args?: SelectSubset<T, formdatamasterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$formdatamasterPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Formdatamaster.
     * @param {formdatamasterCreateArgs} args - Arguments to create a Formdatamaster.
     * @example
     * // Create one Formdatamaster
     * const Formdatamaster = await prisma.formdatamaster.create({
     *   data: {
     *     // ... data to create a Formdatamaster
     *   }
     * })
     * 
     */
    create<T extends formdatamasterCreateArgs>(args: SelectSubset<T, formdatamasterCreateArgs<ExtArgs>>): Prisma__formdatamasterClient<$Result.GetResult<Prisma.$formdatamasterPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Formdatamasters.
     * @param {formdatamasterCreateManyArgs} args - Arguments to create many Formdatamasters.
     * @example
     * // Create many Formdatamasters
     * const formdatamaster = await prisma.formdatamaster.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends formdatamasterCreateManyArgs>(args?: SelectSubset<T, formdatamasterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Formdatamasters and returns the data saved in the database.
     * @param {formdatamasterCreateManyAndReturnArgs} args - Arguments to create many Formdatamasters.
     * @example
     * // Create many Formdatamasters
     * const formdatamaster = await prisma.formdatamaster.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Formdatamasters and only return the `id`
     * const formdatamasterWithIdOnly = await prisma.formdatamaster.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends formdatamasterCreateManyAndReturnArgs>(args?: SelectSubset<T, formdatamasterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$formdatamasterPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Formdatamaster.
     * @param {formdatamasterDeleteArgs} args - Arguments to delete one Formdatamaster.
     * @example
     * // Delete one Formdatamaster
     * const Formdatamaster = await prisma.formdatamaster.delete({
     *   where: {
     *     // ... filter to delete one Formdatamaster
     *   }
     * })
     * 
     */
    delete<T extends formdatamasterDeleteArgs>(args: SelectSubset<T, formdatamasterDeleteArgs<ExtArgs>>): Prisma__formdatamasterClient<$Result.GetResult<Prisma.$formdatamasterPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Formdatamaster.
     * @param {formdatamasterUpdateArgs} args - Arguments to update one Formdatamaster.
     * @example
     * // Update one Formdatamaster
     * const formdatamaster = await prisma.formdatamaster.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends formdatamasterUpdateArgs>(args: SelectSubset<T, formdatamasterUpdateArgs<ExtArgs>>): Prisma__formdatamasterClient<$Result.GetResult<Prisma.$formdatamasterPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Formdatamasters.
     * @param {formdatamasterDeleteManyArgs} args - Arguments to filter Formdatamasters to delete.
     * @example
     * // Delete a few Formdatamasters
     * const { count } = await prisma.formdatamaster.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends formdatamasterDeleteManyArgs>(args?: SelectSubset<T, formdatamasterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Formdatamasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {formdatamasterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Formdatamasters
     * const formdatamaster = await prisma.formdatamaster.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends formdatamasterUpdateManyArgs>(args: SelectSubset<T, formdatamasterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Formdatamaster.
     * @param {formdatamasterUpsertArgs} args - Arguments to update or create a Formdatamaster.
     * @example
     * // Update or create a Formdatamaster
     * const formdatamaster = await prisma.formdatamaster.upsert({
     *   create: {
     *     // ... data to create a Formdatamaster
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Formdatamaster we want to update
     *   }
     * })
     */
    upsert<T extends formdatamasterUpsertArgs>(args: SelectSubset<T, formdatamasterUpsertArgs<ExtArgs>>): Prisma__formdatamasterClient<$Result.GetResult<Prisma.$formdatamasterPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Formdatamasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {formdatamasterCountArgs} args - Arguments to filter Formdatamasters to count.
     * @example
     * // Count the number of Formdatamasters
     * const count = await prisma.formdatamaster.count({
     *   where: {
     *     // ... the filter for the Formdatamasters we want to count
     *   }
     * })
    **/
    count<T extends formdatamasterCountArgs>(
      args?: Subset<T, formdatamasterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FormdatamasterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Formdatamaster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormdatamasterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FormdatamasterAggregateArgs>(args: Subset<T, FormdatamasterAggregateArgs>): Prisma.PrismaPromise<GetFormdatamasterAggregateType<T>>

    /**
     * Group by Formdatamaster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {formdatamasterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends formdatamasterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: formdatamasterGroupByArgs['orderBy'] }
        : { orderBy?: formdatamasterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, formdatamasterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormdatamasterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the formdatamaster model
   */
  readonly fields: formdatamasterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for formdatamaster.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__formdatamasterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usermaster<T extends formdatamaster$usermasterArgs<ExtArgs> = {}>(args?: Subset<T, formdatamaster$usermasterArgs<ExtArgs>>): Prisma__usermasterClient<$Result.GetResult<Prisma.$usermasterPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the formdatamaster model
   */ 
  interface formdatamasterFieldRefs {
    readonly id: FieldRef<"formdatamaster", 'Int'>
    readonly user_id: FieldRef<"formdatamaster", 'Int'>
    readonly feelings: FieldRef<"formdatamaster", 'String'>
    readonly current_mood: FieldRef<"formdatamaster", 'String'>
    readonly current_stress_level: FieldRef<"formdatamaster", 'Int'>
    readonly created_at: FieldRef<"formdatamaster", 'DateTime'>
    readonly updated_at: FieldRef<"formdatamaster", 'DateTime'>
    readonly health_status: FieldRef<"formdatamaster", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * formdatamaster findUnique
   */
  export type formdatamasterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the formdatamaster
     */
    select?: formdatamasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: formdatamasterInclude<ExtArgs> | null
    /**
     * Filter, which formdatamaster to fetch.
     */
    where: formdatamasterWhereUniqueInput
  }

  /**
   * formdatamaster findUniqueOrThrow
   */
  export type formdatamasterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the formdatamaster
     */
    select?: formdatamasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: formdatamasterInclude<ExtArgs> | null
    /**
     * Filter, which formdatamaster to fetch.
     */
    where: formdatamasterWhereUniqueInput
  }

  /**
   * formdatamaster findFirst
   */
  export type formdatamasterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the formdatamaster
     */
    select?: formdatamasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: formdatamasterInclude<ExtArgs> | null
    /**
     * Filter, which formdatamaster to fetch.
     */
    where?: formdatamasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of formdatamasters to fetch.
     */
    orderBy?: formdatamasterOrderByWithRelationInput | formdatamasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for formdatamasters.
     */
    cursor?: formdatamasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` formdatamasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` formdatamasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of formdatamasters.
     */
    distinct?: FormdatamasterScalarFieldEnum | FormdatamasterScalarFieldEnum[]
  }

  /**
   * formdatamaster findFirstOrThrow
   */
  export type formdatamasterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the formdatamaster
     */
    select?: formdatamasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: formdatamasterInclude<ExtArgs> | null
    /**
     * Filter, which formdatamaster to fetch.
     */
    where?: formdatamasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of formdatamasters to fetch.
     */
    orderBy?: formdatamasterOrderByWithRelationInput | formdatamasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for formdatamasters.
     */
    cursor?: formdatamasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` formdatamasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` formdatamasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of formdatamasters.
     */
    distinct?: FormdatamasterScalarFieldEnum | FormdatamasterScalarFieldEnum[]
  }

  /**
   * formdatamaster findMany
   */
  export type formdatamasterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the formdatamaster
     */
    select?: formdatamasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: formdatamasterInclude<ExtArgs> | null
    /**
     * Filter, which formdatamasters to fetch.
     */
    where?: formdatamasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of formdatamasters to fetch.
     */
    orderBy?: formdatamasterOrderByWithRelationInput | formdatamasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing formdatamasters.
     */
    cursor?: formdatamasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` formdatamasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` formdatamasters.
     */
    skip?: number
    distinct?: FormdatamasterScalarFieldEnum | FormdatamasterScalarFieldEnum[]
  }

  /**
   * formdatamaster create
   */
  export type formdatamasterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the formdatamaster
     */
    select?: formdatamasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: formdatamasterInclude<ExtArgs> | null
    /**
     * The data needed to create a formdatamaster.
     */
    data: XOR<formdatamasterCreateInput, formdatamasterUncheckedCreateInput>
  }

  /**
   * formdatamaster createMany
   */
  export type formdatamasterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many formdatamasters.
     */
    data: formdatamasterCreateManyInput | formdatamasterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * formdatamaster createManyAndReturn
   */
  export type formdatamasterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the formdatamaster
     */
    select?: formdatamasterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many formdatamasters.
     */
    data: formdatamasterCreateManyInput | formdatamasterCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: formdatamasterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * formdatamaster update
   */
  export type formdatamasterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the formdatamaster
     */
    select?: formdatamasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: formdatamasterInclude<ExtArgs> | null
    /**
     * The data needed to update a formdatamaster.
     */
    data: XOR<formdatamasterUpdateInput, formdatamasterUncheckedUpdateInput>
    /**
     * Choose, which formdatamaster to update.
     */
    where: formdatamasterWhereUniqueInput
  }

  /**
   * formdatamaster updateMany
   */
  export type formdatamasterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update formdatamasters.
     */
    data: XOR<formdatamasterUpdateManyMutationInput, formdatamasterUncheckedUpdateManyInput>
    /**
     * Filter which formdatamasters to update
     */
    where?: formdatamasterWhereInput
  }

  /**
   * formdatamaster upsert
   */
  export type formdatamasterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the formdatamaster
     */
    select?: formdatamasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: formdatamasterInclude<ExtArgs> | null
    /**
     * The filter to search for the formdatamaster to update in case it exists.
     */
    where: formdatamasterWhereUniqueInput
    /**
     * In case the formdatamaster found by the `where` argument doesn't exist, create a new formdatamaster with this data.
     */
    create: XOR<formdatamasterCreateInput, formdatamasterUncheckedCreateInput>
    /**
     * In case the formdatamaster was found with the provided `where` argument, update it with this data.
     */
    update: XOR<formdatamasterUpdateInput, formdatamasterUncheckedUpdateInput>
  }

  /**
   * formdatamaster delete
   */
  export type formdatamasterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the formdatamaster
     */
    select?: formdatamasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: formdatamasterInclude<ExtArgs> | null
    /**
     * Filter which formdatamaster to delete.
     */
    where: formdatamasterWhereUniqueInput
  }

  /**
   * formdatamaster deleteMany
   */
  export type formdatamasterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which formdatamasters to delete
     */
    where?: formdatamasterWhereInput
  }

  /**
   * formdatamaster.usermaster
   */
  export type formdatamaster$usermasterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usermaster
     */
    select?: usermasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usermasterInclude<ExtArgs> | null
    where?: usermasterWhereInput
  }

  /**
   * formdatamaster without action
   */
  export type formdatamasterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the formdatamaster
     */
    select?: formdatamasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: formdatamasterInclude<ExtArgs> | null
  }


  /**
   * Model rolemaster
   */

  export type AggregateRolemaster = {
    _count: RolemasterCountAggregateOutputType | null
    _min: RolemasterMinAggregateOutputType | null
    _max: RolemasterMaxAggregateOutputType | null
  }

  export type RolemasterMinAggregateOutputType = {
    id: string | null
    name: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type RolemasterMaxAggregateOutputType = {
    id: string | null
    name: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type RolemasterCountAggregateOutputType = {
    id: number
    name: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type RolemasterMinAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    updated_at?: true
  }

  export type RolemasterMaxAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    updated_at?: true
  }

  export type RolemasterCountAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type RolemasterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which rolemaster to aggregate.
     */
    where?: rolemasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rolemasters to fetch.
     */
    orderBy?: rolemasterOrderByWithRelationInput | rolemasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: rolemasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rolemasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rolemasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned rolemasters
    **/
    _count?: true | RolemasterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolemasterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolemasterMaxAggregateInputType
  }

  export type GetRolemasterAggregateType<T extends RolemasterAggregateArgs> = {
        [P in keyof T & keyof AggregateRolemaster]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRolemaster[P]>
      : GetScalarType<T[P], AggregateRolemaster[P]>
  }




  export type rolemasterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: rolemasterWhereInput
    orderBy?: rolemasterOrderByWithAggregationInput | rolemasterOrderByWithAggregationInput[]
    by: RolemasterScalarFieldEnum[] | RolemasterScalarFieldEnum
    having?: rolemasterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolemasterCountAggregateInputType | true
    _min?: RolemasterMinAggregateInputType
    _max?: RolemasterMaxAggregateInputType
  }

  export type RolemasterGroupByOutputType = {
    id: string
    name: string
    created_at: Date
    updated_at: Date
    _count: RolemasterCountAggregateOutputType | null
    _min: RolemasterMinAggregateOutputType | null
    _max: RolemasterMaxAggregateOutputType | null
  }

  type GetRolemasterGroupByPayload<T extends rolemasterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RolemasterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolemasterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolemasterGroupByOutputType[P]>
            : GetScalarType<T[P], RolemasterGroupByOutputType[P]>
        }
      >
    >


  export type rolemasterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    created_at?: boolean
    updated_at?: boolean
    usermaster?: boolean | rolemaster$usermasterArgs<ExtArgs>
    _count?: boolean | RolemasterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rolemaster"]>

  export type rolemasterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["rolemaster"]>

  export type rolemasterSelectScalar = {
    id?: boolean
    name?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type rolemasterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usermaster?: boolean | rolemaster$usermasterArgs<ExtArgs>
    _count?: boolean | RolemasterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type rolemasterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $rolemasterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "rolemaster"
    objects: {
      usermaster: Prisma.$usermasterPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["rolemaster"]>
    composites: {}
  }

  type rolemasterGetPayload<S extends boolean | null | undefined | rolemasterDefaultArgs> = $Result.GetResult<Prisma.$rolemasterPayload, S>

  type rolemasterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<rolemasterFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RolemasterCountAggregateInputType | true
    }

  export interface rolemasterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['rolemaster'], meta: { name: 'rolemaster' } }
    /**
     * Find zero or one Rolemaster that matches the filter.
     * @param {rolemasterFindUniqueArgs} args - Arguments to find a Rolemaster
     * @example
     * // Get one Rolemaster
     * const rolemaster = await prisma.rolemaster.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends rolemasterFindUniqueArgs>(args: SelectSubset<T, rolemasterFindUniqueArgs<ExtArgs>>): Prisma__rolemasterClient<$Result.GetResult<Prisma.$rolemasterPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Rolemaster that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {rolemasterFindUniqueOrThrowArgs} args - Arguments to find a Rolemaster
     * @example
     * // Get one Rolemaster
     * const rolemaster = await prisma.rolemaster.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends rolemasterFindUniqueOrThrowArgs>(args: SelectSubset<T, rolemasterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__rolemasterClient<$Result.GetResult<Prisma.$rolemasterPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Rolemaster that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolemasterFindFirstArgs} args - Arguments to find a Rolemaster
     * @example
     * // Get one Rolemaster
     * const rolemaster = await prisma.rolemaster.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends rolemasterFindFirstArgs>(args?: SelectSubset<T, rolemasterFindFirstArgs<ExtArgs>>): Prisma__rolemasterClient<$Result.GetResult<Prisma.$rolemasterPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Rolemaster that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolemasterFindFirstOrThrowArgs} args - Arguments to find a Rolemaster
     * @example
     * // Get one Rolemaster
     * const rolemaster = await prisma.rolemaster.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends rolemasterFindFirstOrThrowArgs>(args?: SelectSubset<T, rolemasterFindFirstOrThrowArgs<ExtArgs>>): Prisma__rolemasterClient<$Result.GetResult<Prisma.$rolemasterPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Rolemasters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolemasterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rolemasters
     * const rolemasters = await prisma.rolemaster.findMany()
     * 
     * // Get first 10 Rolemasters
     * const rolemasters = await prisma.rolemaster.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rolemasterWithIdOnly = await prisma.rolemaster.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends rolemasterFindManyArgs>(args?: SelectSubset<T, rolemasterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rolemasterPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Rolemaster.
     * @param {rolemasterCreateArgs} args - Arguments to create a Rolemaster.
     * @example
     * // Create one Rolemaster
     * const Rolemaster = await prisma.rolemaster.create({
     *   data: {
     *     // ... data to create a Rolemaster
     *   }
     * })
     * 
     */
    create<T extends rolemasterCreateArgs>(args: SelectSubset<T, rolemasterCreateArgs<ExtArgs>>): Prisma__rolemasterClient<$Result.GetResult<Prisma.$rolemasterPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Rolemasters.
     * @param {rolemasterCreateManyArgs} args - Arguments to create many Rolemasters.
     * @example
     * // Create many Rolemasters
     * const rolemaster = await prisma.rolemaster.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends rolemasterCreateManyArgs>(args?: SelectSubset<T, rolemasterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Rolemasters and returns the data saved in the database.
     * @param {rolemasterCreateManyAndReturnArgs} args - Arguments to create many Rolemasters.
     * @example
     * // Create many Rolemasters
     * const rolemaster = await prisma.rolemaster.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Rolemasters and only return the `id`
     * const rolemasterWithIdOnly = await prisma.rolemaster.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends rolemasterCreateManyAndReturnArgs>(args?: SelectSubset<T, rolemasterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rolemasterPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Rolemaster.
     * @param {rolemasterDeleteArgs} args - Arguments to delete one Rolemaster.
     * @example
     * // Delete one Rolemaster
     * const Rolemaster = await prisma.rolemaster.delete({
     *   where: {
     *     // ... filter to delete one Rolemaster
     *   }
     * })
     * 
     */
    delete<T extends rolemasterDeleteArgs>(args: SelectSubset<T, rolemasterDeleteArgs<ExtArgs>>): Prisma__rolemasterClient<$Result.GetResult<Prisma.$rolemasterPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Rolemaster.
     * @param {rolemasterUpdateArgs} args - Arguments to update one Rolemaster.
     * @example
     * // Update one Rolemaster
     * const rolemaster = await prisma.rolemaster.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends rolemasterUpdateArgs>(args: SelectSubset<T, rolemasterUpdateArgs<ExtArgs>>): Prisma__rolemasterClient<$Result.GetResult<Prisma.$rolemasterPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Rolemasters.
     * @param {rolemasterDeleteManyArgs} args - Arguments to filter Rolemasters to delete.
     * @example
     * // Delete a few Rolemasters
     * const { count } = await prisma.rolemaster.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends rolemasterDeleteManyArgs>(args?: SelectSubset<T, rolemasterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rolemasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolemasterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rolemasters
     * const rolemaster = await prisma.rolemaster.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends rolemasterUpdateManyArgs>(args: SelectSubset<T, rolemasterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rolemaster.
     * @param {rolemasterUpsertArgs} args - Arguments to update or create a Rolemaster.
     * @example
     * // Update or create a Rolemaster
     * const rolemaster = await prisma.rolemaster.upsert({
     *   create: {
     *     // ... data to create a Rolemaster
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rolemaster we want to update
     *   }
     * })
     */
    upsert<T extends rolemasterUpsertArgs>(args: SelectSubset<T, rolemasterUpsertArgs<ExtArgs>>): Prisma__rolemasterClient<$Result.GetResult<Prisma.$rolemasterPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Rolemasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolemasterCountArgs} args - Arguments to filter Rolemasters to count.
     * @example
     * // Count the number of Rolemasters
     * const count = await prisma.rolemaster.count({
     *   where: {
     *     // ... the filter for the Rolemasters we want to count
     *   }
     * })
    **/
    count<T extends rolemasterCountArgs>(
      args?: Subset<T, rolemasterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolemasterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rolemaster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolemasterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolemasterAggregateArgs>(args: Subset<T, RolemasterAggregateArgs>): Prisma.PrismaPromise<GetRolemasterAggregateType<T>>

    /**
     * Group by Rolemaster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolemasterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends rolemasterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: rolemasterGroupByArgs['orderBy'] }
        : { orderBy?: rolemasterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, rolemasterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolemasterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the rolemaster model
   */
  readonly fields: rolemasterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for rolemaster.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__rolemasterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usermaster<T extends rolemaster$usermasterArgs<ExtArgs> = {}>(args?: Subset<T, rolemaster$usermasterArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usermasterPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the rolemaster model
   */ 
  interface rolemasterFieldRefs {
    readonly id: FieldRef<"rolemaster", 'String'>
    readonly name: FieldRef<"rolemaster", 'String'>
    readonly created_at: FieldRef<"rolemaster", 'DateTime'>
    readonly updated_at: FieldRef<"rolemaster", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * rolemaster findUnique
   */
  export type rolemasterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rolemaster
     */
    select?: rolemasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolemasterInclude<ExtArgs> | null
    /**
     * Filter, which rolemaster to fetch.
     */
    where: rolemasterWhereUniqueInput
  }

  /**
   * rolemaster findUniqueOrThrow
   */
  export type rolemasterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rolemaster
     */
    select?: rolemasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolemasterInclude<ExtArgs> | null
    /**
     * Filter, which rolemaster to fetch.
     */
    where: rolemasterWhereUniqueInput
  }

  /**
   * rolemaster findFirst
   */
  export type rolemasterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rolemaster
     */
    select?: rolemasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolemasterInclude<ExtArgs> | null
    /**
     * Filter, which rolemaster to fetch.
     */
    where?: rolemasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rolemasters to fetch.
     */
    orderBy?: rolemasterOrderByWithRelationInput | rolemasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for rolemasters.
     */
    cursor?: rolemasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rolemasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rolemasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of rolemasters.
     */
    distinct?: RolemasterScalarFieldEnum | RolemasterScalarFieldEnum[]
  }

  /**
   * rolemaster findFirstOrThrow
   */
  export type rolemasterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rolemaster
     */
    select?: rolemasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolemasterInclude<ExtArgs> | null
    /**
     * Filter, which rolemaster to fetch.
     */
    where?: rolemasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rolemasters to fetch.
     */
    orderBy?: rolemasterOrderByWithRelationInput | rolemasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for rolemasters.
     */
    cursor?: rolemasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rolemasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rolemasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of rolemasters.
     */
    distinct?: RolemasterScalarFieldEnum | RolemasterScalarFieldEnum[]
  }

  /**
   * rolemaster findMany
   */
  export type rolemasterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rolemaster
     */
    select?: rolemasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolemasterInclude<ExtArgs> | null
    /**
     * Filter, which rolemasters to fetch.
     */
    where?: rolemasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rolemasters to fetch.
     */
    orderBy?: rolemasterOrderByWithRelationInput | rolemasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing rolemasters.
     */
    cursor?: rolemasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rolemasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rolemasters.
     */
    skip?: number
    distinct?: RolemasterScalarFieldEnum | RolemasterScalarFieldEnum[]
  }

  /**
   * rolemaster create
   */
  export type rolemasterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rolemaster
     */
    select?: rolemasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolemasterInclude<ExtArgs> | null
    /**
     * The data needed to create a rolemaster.
     */
    data: XOR<rolemasterCreateInput, rolemasterUncheckedCreateInput>
  }

  /**
   * rolemaster createMany
   */
  export type rolemasterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many rolemasters.
     */
    data: rolemasterCreateManyInput | rolemasterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * rolemaster createManyAndReturn
   */
  export type rolemasterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rolemaster
     */
    select?: rolemasterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many rolemasters.
     */
    data: rolemasterCreateManyInput | rolemasterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * rolemaster update
   */
  export type rolemasterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rolemaster
     */
    select?: rolemasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolemasterInclude<ExtArgs> | null
    /**
     * The data needed to update a rolemaster.
     */
    data: XOR<rolemasterUpdateInput, rolemasterUncheckedUpdateInput>
    /**
     * Choose, which rolemaster to update.
     */
    where: rolemasterWhereUniqueInput
  }

  /**
   * rolemaster updateMany
   */
  export type rolemasterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update rolemasters.
     */
    data: XOR<rolemasterUpdateManyMutationInput, rolemasterUncheckedUpdateManyInput>
    /**
     * Filter which rolemasters to update
     */
    where?: rolemasterWhereInput
  }

  /**
   * rolemaster upsert
   */
  export type rolemasterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rolemaster
     */
    select?: rolemasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolemasterInclude<ExtArgs> | null
    /**
     * The filter to search for the rolemaster to update in case it exists.
     */
    where: rolemasterWhereUniqueInput
    /**
     * In case the rolemaster found by the `where` argument doesn't exist, create a new rolemaster with this data.
     */
    create: XOR<rolemasterCreateInput, rolemasterUncheckedCreateInput>
    /**
     * In case the rolemaster was found with the provided `where` argument, update it with this data.
     */
    update: XOR<rolemasterUpdateInput, rolemasterUncheckedUpdateInput>
  }

  /**
   * rolemaster delete
   */
  export type rolemasterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rolemaster
     */
    select?: rolemasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolemasterInclude<ExtArgs> | null
    /**
     * Filter which rolemaster to delete.
     */
    where: rolemasterWhereUniqueInput
  }

  /**
   * rolemaster deleteMany
   */
  export type rolemasterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which rolemasters to delete
     */
    where?: rolemasterWhereInput
  }

  /**
   * rolemaster.usermaster
   */
  export type rolemaster$usermasterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usermaster
     */
    select?: usermasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usermasterInclude<ExtArgs> | null
    where?: usermasterWhereInput
    orderBy?: usermasterOrderByWithRelationInput | usermasterOrderByWithRelationInput[]
    cursor?: usermasterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsermasterScalarFieldEnum | UsermasterScalarFieldEnum[]
  }

  /**
   * rolemaster without action
   */
  export type rolemasterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rolemaster
     */
    select?: rolemasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolemasterInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsermasterScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    created_at: 'created_at',
    updated_at: 'updated_at',
    role_id: 'role_id'
  };

  export type UsermasterScalarFieldEnum = (typeof UsermasterScalarFieldEnum)[keyof typeof UsermasterScalarFieldEnum]


  export const FormdatamasterScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    feelings: 'feelings',
    current_mood: 'current_mood',
    current_stress_level: 'current_stress_level',
    created_at: 'created_at',
    updated_at: 'updated_at',
    health_status: 'health_status'
  };

  export type FormdatamasterScalarFieldEnum = (typeof FormdatamasterScalarFieldEnum)[keyof typeof FormdatamasterScalarFieldEnum]


  export const RolemasterScalarFieldEnum: {
    id: 'id',
    name: 'name',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type RolemasterScalarFieldEnum = (typeof RolemasterScalarFieldEnum)[keyof typeof RolemasterScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type usermasterWhereInput = {
    AND?: usermasterWhereInput | usermasterWhereInput[]
    OR?: usermasterWhereInput[]
    NOT?: usermasterWhereInput | usermasterWhereInput[]
    id?: IntFilter<"usermaster"> | number
    email?: StringFilter<"usermaster"> | string
    password?: StringFilter<"usermaster"> | string
    name?: StringFilter<"usermaster"> | string
    created_at?: DateTimeNullableFilter<"usermaster"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"usermaster"> | Date | string | null
    role_id?: UuidNullableFilter<"usermaster"> | string | null
    formdatamaster?: FormdatamasterListRelationFilter
    rolemaster?: XOR<RolemasterNullableRelationFilter, rolemasterWhereInput> | null
  }

  export type usermasterOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    role_id?: SortOrderInput | SortOrder
    formdatamaster?: formdatamasterOrderByRelationAggregateInput
    rolemaster?: rolemasterOrderByWithRelationInput
  }

  export type usermasterWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: usermasterWhereInput | usermasterWhereInput[]
    OR?: usermasterWhereInput[]
    NOT?: usermasterWhereInput | usermasterWhereInput[]
    email?: StringFilter<"usermaster"> | string
    password?: StringFilter<"usermaster"> | string
    name?: StringFilter<"usermaster"> | string
    created_at?: DateTimeNullableFilter<"usermaster"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"usermaster"> | Date | string | null
    role_id?: UuidNullableFilter<"usermaster"> | string | null
    formdatamaster?: FormdatamasterListRelationFilter
    rolemaster?: XOR<RolemasterNullableRelationFilter, rolemasterWhereInput> | null
  }, "id">

  export type usermasterOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    role_id?: SortOrderInput | SortOrder
    _count?: usermasterCountOrderByAggregateInput
    _avg?: usermasterAvgOrderByAggregateInput
    _max?: usermasterMaxOrderByAggregateInput
    _min?: usermasterMinOrderByAggregateInput
    _sum?: usermasterSumOrderByAggregateInput
  }

  export type usermasterScalarWhereWithAggregatesInput = {
    AND?: usermasterScalarWhereWithAggregatesInput | usermasterScalarWhereWithAggregatesInput[]
    OR?: usermasterScalarWhereWithAggregatesInput[]
    NOT?: usermasterScalarWhereWithAggregatesInput | usermasterScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"usermaster"> | number
    email?: StringWithAggregatesFilter<"usermaster"> | string
    password?: StringWithAggregatesFilter<"usermaster"> | string
    name?: StringWithAggregatesFilter<"usermaster"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"usermaster"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"usermaster"> | Date | string | null
    role_id?: UuidNullableWithAggregatesFilter<"usermaster"> | string | null
  }

  export type formdatamasterWhereInput = {
    AND?: formdatamasterWhereInput | formdatamasterWhereInput[]
    OR?: formdatamasterWhereInput[]
    NOT?: formdatamasterWhereInput | formdatamasterWhereInput[]
    id?: IntFilter<"formdatamaster"> | number
    user_id?: IntNullableFilter<"formdatamaster"> | number | null
    feelings?: StringFilter<"formdatamaster"> | string
    current_mood?: StringFilter<"formdatamaster"> | string
    current_stress_level?: IntFilter<"formdatamaster"> | number
    created_at?: DateTimeNullableFilter<"formdatamaster"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"formdatamaster"> | Date | string | null
    health_status?: IntNullableFilter<"formdatamaster"> | number | null
    usermaster?: XOR<UsermasterNullableRelationFilter, usermasterWhereInput> | null
  }

  export type formdatamasterOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    feelings?: SortOrder
    current_mood?: SortOrder
    current_stress_level?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    health_status?: SortOrderInput | SortOrder
    usermaster?: usermasterOrderByWithRelationInput
  }

  export type formdatamasterWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: formdatamasterWhereInput | formdatamasterWhereInput[]
    OR?: formdatamasterWhereInput[]
    NOT?: formdatamasterWhereInput | formdatamasterWhereInput[]
    user_id?: IntNullableFilter<"formdatamaster"> | number | null
    feelings?: StringFilter<"formdatamaster"> | string
    current_mood?: StringFilter<"formdatamaster"> | string
    current_stress_level?: IntFilter<"formdatamaster"> | number
    created_at?: DateTimeNullableFilter<"formdatamaster"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"formdatamaster"> | Date | string | null
    health_status?: IntNullableFilter<"formdatamaster"> | number | null
    usermaster?: XOR<UsermasterNullableRelationFilter, usermasterWhereInput> | null
  }, "id">

  export type formdatamasterOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    feelings?: SortOrder
    current_mood?: SortOrder
    current_stress_level?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    health_status?: SortOrderInput | SortOrder
    _count?: formdatamasterCountOrderByAggregateInput
    _avg?: formdatamasterAvgOrderByAggregateInput
    _max?: formdatamasterMaxOrderByAggregateInput
    _min?: formdatamasterMinOrderByAggregateInput
    _sum?: formdatamasterSumOrderByAggregateInput
  }

  export type formdatamasterScalarWhereWithAggregatesInput = {
    AND?: formdatamasterScalarWhereWithAggregatesInput | formdatamasterScalarWhereWithAggregatesInput[]
    OR?: formdatamasterScalarWhereWithAggregatesInput[]
    NOT?: formdatamasterScalarWhereWithAggregatesInput | formdatamasterScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"formdatamaster"> | number
    user_id?: IntNullableWithAggregatesFilter<"formdatamaster"> | number | null
    feelings?: StringWithAggregatesFilter<"formdatamaster"> | string
    current_mood?: StringWithAggregatesFilter<"formdatamaster"> | string
    current_stress_level?: IntWithAggregatesFilter<"formdatamaster"> | number
    created_at?: DateTimeNullableWithAggregatesFilter<"formdatamaster"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"formdatamaster"> | Date | string | null
    health_status?: IntNullableWithAggregatesFilter<"formdatamaster"> | number | null
  }

  export type rolemasterWhereInput = {
    AND?: rolemasterWhereInput | rolemasterWhereInput[]
    OR?: rolemasterWhereInput[]
    NOT?: rolemasterWhereInput | rolemasterWhereInput[]
    id?: UuidFilter<"rolemaster"> | string
    name?: StringFilter<"rolemaster"> | string
    created_at?: DateTimeFilter<"rolemaster"> | Date | string
    updated_at?: DateTimeFilter<"rolemaster"> | Date | string
    usermaster?: UsermasterListRelationFilter
  }

  export type rolemasterOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    usermaster?: usermasterOrderByRelationAggregateInput
  }

  export type rolemasterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: rolemasterWhereInput | rolemasterWhereInput[]
    OR?: rolemasterWhereInput[]
    NOT?: rolemasterWhereInput | rolemasterWhereInput[]
    name?: StringFilter<"rolemaster"> | string
    created_at?: DateTimeFilter<"rolemaster"> | Date | string
    updated_at?: DateTimeFilter<"rolemaster"> | Date | string
    usermaster?: UsermasterListRelationFilter
  }, "id">

  export type rolemasterOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: rolemasterCountOrderByAggregateInput
    _max?: rolemasterMaxOrderByAggregateInput
    _min?: rolemasterMinOrderByAggregateInput
  }

  export type rolemasterScalarWhereWithAggregatesInput = {
    AND?: rolemasterScalarWhereWithAggregatesInput | rolemasterScalarWhereWithAggregatesInput[]
    OR?: rolemasterScalarWhereWithAggregatesInput[]
    NOT?: rolemasterScalarWhereWithAggregatesInput | rolemasterScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"rolemaster"> | string
    name?: StringWithAggregatesFilter<"rolemaster"> | string
    created_at?: DateTimeWithAggregatesFilter<"rolemaster"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"rolemaster"> | Date | string
  }

  export type usermasterCreateInput = {
    email: string
    password: string
    name: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    formdatamaster?: formdatamasterCreateNestedManyWithoutUsermasterInput
    rolemaster?: rolemasterCreateNestedOneWithoutUsermasterInput
  }

  export type usermasterUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    name: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    role_id?: string | null
    formdatamaster?: formdatamasterUncheckedCreateNestedManyWithoutUsermasterInput
  }

  export type usermasterUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    formdatamaster?: formdatamasterUpdateManyWithoutUsermasterNestedInput
    rolemaster?: rolemasterUpdateOneWithoutUsermasterNestedInput
  }

  export type usermasterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role_id?: NullableStringFieldUpdateOperationsInput | string | null
    formdatamaster?: formdatamasterUncheckedUpdateManyWithoutUsermasterNestedInput
  }

  export type usermasterCreateManyInput = {
    id?: number
    email: string
    password: string
    name: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    role_id?: string | null
  }

  export type usermasterUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usermasterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type formdatamasterCreateInput = {
    feelings: string
    current_mood: string
    current_stress_level: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    health_status?: number | null
    usermaster?: usermasterCreateNestedOneWithoutFormdatamasterInput
  }

  export type formdatamasterUncheckedCreateInput = {
    id?: number
    user_id?: number | null
    feelings: string
    current_mood: string
    current_stress_level: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    health_status?: number | null
  }

  export type formdatamasterUpdateInput = {
    feelings?: StringFieldUpdateOperationsInput | string
    current_mood?: StringFieldUpdateOperationsInput | string
    current_stress_level?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    health_status?: NullableIntFieldUpdateOperationsInput | number | null
    usermaster?: usermasterUpdateOneWithoutFormdatamasterNestedInput
  }

  export type formdatamasterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    feelings?: StringFieldUpdateOperationsInput | string
    current_mood?: StringFieldUpdateOperationsInput | string
    current_stress_level?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    health_status?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type formdatamasterCreateManyInput = {
    id?: number
    user_id?: number | null
    feelings: string
    current_mood: string
    current_stress_level: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    health_status?: number | null
  }

  export type formdatamasterUpdateManyMutationInput = {
    feelings?: StringFieldUpdateOperationsInput | string
    current_mood?: StringFieldUpdateOperationsInput | string
    current_stress_level?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    health_status?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type formdatamasterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    feelings?: StringFieldUpdateOperationsInput | string
    current_mood?: StringFieldUpdateOperationsInput | string
    current_stress_level?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    health_status?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type rolemasterCreateInput = {
    id?: string
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    usermaster?: usermasterCreateNestedManyWithoutRolemasterInput
  }

  export type rolemasterUncheckedCreateInput = {
    id?: string
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    usermaster?: usermasterUncheckedCreateNestedManyWithoutRolemasterInput
  }

  export type rolemasterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    usermaster?: usermasterUpdateManyWithoutRolemasterNestedInput
  }

  export type rolemasterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    usermaster?: usermasterUncheckedUpdateManyWithoutRolemasterNestedInput
  }

  export type rolemasterCreateManyInput = {
    id?: string
    name: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type rolemasterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type rolemasterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type FormdatamasterListRelationFilter = {
    every?: formdatamasterWhereInput
    some?: formdatamasterWhereInput
    none?: formdatamasterWhereInput
  }

  export type RolemasterNullableRelationFilter = {
    is?: rolemasterWhereInput | null
    isNot?: rolemasterWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type formdatamasterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usermasterCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    role_id?: SortOrder
  }

  export type usermasterAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usermasterMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    role_id?: SortOrder
  }

  export type usermasterMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    role_id?: SortOrder
  }

  export type usermasterSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UsermasterNullableRelationFilter = {
    is?: usermasterWhereInput | null
    isNot?: usermasterWhereInput | null
  }

  export type formdatamasterCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    feelings?: SortOrder
    current_mood?: SortOrder
    current_stress_level?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    health_status?: SortOrder
  }

  export type formdatamasterAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    current_stress_level?: SortOrder
    health_status?: SortOrder
  }

  export type formdatamasterMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    feelings?: SortOrder
    current_mood?: SortOrder
    current_stress_level?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    health_status?: SortOrder
  }

  export type formdatamasterMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    feelings?: SortOrder
    current_mood?: SortOrder
    current_stress_level?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    health_status?: SortOrder
  }

  export type formdatamasterSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    current_stress_level?: SortOrder
    health_status?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UsermasterListRelationFilter = {
    every?: usermasterWhereInput
    some?: usermasterWhereInput
    none?: usermasterWhereInput
  }

  export type usermasterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type rolemasterCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type rolemasterMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type rolemasterMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type formdatamasterCreateNestedManyWithoutUsermasterInput = {
    create?: XOR<formdatamasterCreateWithoutUsermasterInput, formdatamasterUncheckedCreateWithoutUsermasterInput> | formdatamasterCreateWithoutUsermasterInput[] | formdatamasterUncheckedCreateWithoutUsermasterInput[]
    connectOrCreate?: formdatamasterCreateOrConnectWithoutUsermasterInput | formdatamasterCreateOrConnectWithoutUsermasterInput[]
    createMany?: formdatamasterCreateManyUsermasterInputEnvelope
    connect?: formdatamasterWhereUniqueInput | formdatamasterWhereUniqueInput[]
  }

  export type rolemasterCreateNestedOneWithoutUsermasterInput = {
    create?: XOR<rolemasterCreateWithoutUsermasterInput, rolemasterUncheckedCreateWithoutUsermasterInput>
    connectOrCreate?: rolemasterCreateOrConnectWithoutUsermasterInput
    connect?: rolemasterWhereUniqueInput
  }

  export type formdatamasterUncheckedCreateNestedManyWithoutUsermasterInput = {
    create?: XOR<formdatamasterCreateWithoutUsermasterInput, formdatamasterUncheckedCreateWithoutUsermasterInput> | formdatamasterCreateWithoutUsermasterInput[] | formdatamasterUncheckedCreateWithoutUsermasterInput[]
    connectOrCreate?: formdatamasterCreateOrConnectWithoutUsermasterInput | formdatamasterCreateOrConnectWithoutUsermasterInput[]
    createMany?: formdatamasterCreateManyUsermasterInputEnvelope
    connect?: formdatamasterWhereUniqueInput | formdatamasterWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type formdatamasterUpdateManyWithoutUsermasterNestedInput = {
    create?: XOR<formdatamasterCreateWithoutUsermasterInput, formdatamasterUncheckedCreateWithoutUsermasterInput> | formdatamasterCreateWithoutUsermasterInput[] | formdatamasterUncheckedCreateWithoutUsermasterInput[]
    connectOrCreate?: formdatamasterCreateOrConnectWithoutUsermasterInput | formdatamasterCreateOrConnectWithoutUsermasterInput[]
    upsert?: formdatamasterUpsertWithWhereUniqueWithoutUsermasterInput | formdatamasterUpsertWithWhereUniqueWithoutUsermasterInput[]
    createMany?: formdatamasterCreateManyUsermasterInputEnvelope
    set?: formdatamasterWhereUniqueInput | formdatamasterWhereUniqueInput[]
    disconnect?: formdatamasterWhereUniqueInput | formdatamasterWhereUniqueInput[]
    delete?: formdatamasterWhereUniqueInput | formdatamasterWhereUniqueInput[]
    connect?: formdatamasterWhereUniqueInput | formdatamasterWhereUniqueInput[]
    update?: formdatamasterUpdateWithWhereUniqueWithoutUsermasterInput | formdatamasterUpdateWithWhereUniqueWithoutUsermasterInput[]
    updateMany?: formdatamasterUpdateManyWithWhereWithoutUsermasterInput | formdatamasterUpdateManyWithWhereWithoutUsermasterInput[]
    deleteMany?: formdatamasterScalarWhereInput | formdatamasterScalarWhereInput[]
  }

  export type rolemasterUpdateOneWithoutUsermasterNestedInput = {
    create?: XOR<rolemasterCreateWithoutUsermasterInput, rolemasterUncheckedCreateWithoutUsermasterInput>
    connectOrCreate?: rolemasterCreateOrConnectWithoutUsermasterInput
    upsert?: rolemasterUpsertWithoutUsermasterInput
    disconnect?: rolemasterWhereInput | boolean
    delete?: rolemasterWhereInput | boolean
    connect?: rolemasterWhereUniqueInput
    update?: XOR<XOR<rolemasterUpdateToOneWithWhereWithoutUsermasterInput, rolemasterUpdateWithoutUsermasterInput>, rolemasterUncheckedUpdateWithoutUsermasterInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type formdatamasterUncheckedUpdateManyWithoutUsermasterNestedInput = {
    create?: XOR<formdatamasterCreateWithoutUsermasterInput, formdatamasterUncheckedCreateWithoutUsermasterInput> | formdatamasterCreateWithoutUsermasterInput[] | formdatamasterUncheckedCreateWithoutUsermasterInput[]
    connectOrCreate?: formdatamasterCreateOrConnectWithoutUsermasterInput | formdatamasterCreateOrConnectWithoutUsermasterInput[]
    upsert?: formdatamasterUpsertWithWhereUniqueWithoutUsermasterInput | formdatamasterUpsertWithWhereUniqueWithoutUsermasterInput[]
    createMany?: formdatamasterCreateManyUsermasterInputEnvelope
    set?: formdatamasterWhereUniqueInput | formdatamasterWhereUniqueInput[]
    disconnect?: formdatamasterWhereUniqueInput | formdatamasterWhereUniqueInput[]
    delete?: formdatamasterWhereUniqueInput | formdatamasterWhereUniqueInput[]
    connect?: formdatamasterWhereUniqueInput | formdatamasterWhereUniqueInput[]
    update?: formdatamasterUpdateWithWhereUniqueWithoutUsermasterInput | formdatamasterUpdateWithWhereUniqueWithoutUsermasterInput[]
    updateMany?: formdatamasterUpdateManyWithWhereWithoutUsermasterInput | formdatamasterUpdateManyWithWhereWithoutUsermasterInput[]
    deleteMany?: formdatamasterScalarWhereInput | formdatamasterScalarWhereInput[]
  }

  export type usermasterCreateNestedOneWithoutFormdatamasterInput = {
    create?: XOR<usermasterCreateWithoutFormdatamasterInput, usermasterUncheckedCreateWithoutFormdatamasterInput>
    connectOrCreate?: usermasterCreateOrConnectWithoutFormdatamasterInput
    connect?: usermasterWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type usermasterUpdateOneWithoutFormdatamasterNestedInput = {
    create?: XOR<usermasterCreateWithoutFormdatamasterInput, usermasterUncheckedCreateWithoutFormdatamasterInput>
    connectOrCreate?: usermasterCreateOrConnectWithoutFormdatamasterInput
    upsert?: usermasterUpsertWithoutFormdatamasterInput
    disconnect?: usermasterWhereInput | boolean
    delete?: usermasterWhereInput | boolean
    connect?: usermasterWhereUniqueInput
    update?: XOR<XOR<usermasterUpdateToOneWithWhereWithoutFormdatamasterInput, usermasterUpdateWithoutFormdatamasterInput>, usermasterUncheckedUpdateWithoutFormdatamasterInput>
  }

  export type usermasterCreateNestedManyWithoutRolemasterInput = {
    create?: XOR<usermasterCreateWithoutRolemasterInput, usermasterUncheckedCreateWithoutRolemasterInput> | usermasterCreateWithoutRolemasterInput[] | usermasterUncheckedCreateWithoutRolemasterInput[]
    connectOrCreate?: usermasterCreateOrConnectWithoutRolemasterInput | usermasterCreateOrConnectWithoutRolemasterInput[]
    createMany?: usermasterCreateManyRolemasterInputEnvelope
    connect?: usermasterWhereUniqueInput | usermasterWhereUniqueInput[]
  }

  export type usermasterUncheckedCreateNestedManyWithoutRolemasterInput = {
    create?: XOR<usermasterCreateWithoutRolemasterInput, usermasterUncheckedCreateWithoutRolemasterInput> | usermasterCreateWithoutRolemasterInput[] | usermasterUncheckedCreateWithoutRolemasterInput[]
    connectOrCreate?: usermasterCreateOrConnectWithoutRolemasterInput | usermasterCreateOrConnectWithoutRolemasterInput[]
    createMany?: usermasterCreateManyRolemasterInputEnvelope
    connect?: usermasterWhereUniqueInput | usermasterWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type usermasterUpdateManyWithoutRolemasterNestedInput = {
    create?: XOR<usermasterCreateWithoutRolemasterInput, usermasterUncheckedCreateWithoutRolemasterInput> | usermasterCreateWithoutRolemasterInput[] | usermasterUncheckedCreateWithoutRolemasterInput[]
    connectOrCreate?: usermasterCreateOrConnectWithoutRolemasterInput | usermasterCreateOrConnectWithoutRolemasterInput[]
    upsert?: usermasterUpsertWithWhereUniqueWithoutRolemasterInput | usermasterUpsertWithWhereUniqueWithoutRolemasterInput[]
    createMany?: usermasterCreateManyRolemasterInputEnvelope
    set?: usermasterWhereUniqueInput | usermasterWhereUniqueInput[]
    disconnect?: usermasterWhereUniqueInput | usermasterWhereUniqueInput[]
    delete?: usermasterWhereUniqueInput | usermasterWhereUniqueInput[]
    connect?: usermasterWhereUniqueInput | usermasterWhereUniqueInput[]
    update?: usermasterUpdateWithWhereUniqueWithoutRolemasterInput | usermasterUpdateWithWhereUniqueWithoutRolemasterInput[]
    updateMany?: usermasterUpdateManyWithWhereWithoutRolemasterInput | usermasterUpdateManyWithWhereWithoutRolemasterInput[]
    deleteMany?: usermasterScalarWhereInput | usermasterScalarWhereInput[]
  }

  export type usermasterUncheckedUpdateManyWithoutRolemasterNestedInput = {
    create?: XOR<usermasterCreateWithoutRolemasterInput, usermasterUncheckedCreateWithoutRolemasterInput> | usermasterCreateWithoutRolemasterInput[] | usermasterUncheckedCreateWithoutRolemasterInput[]
    connectOrCreate?: usermasterCreateOrConnectWithoutRolemasterInput | usermasterCreateOrConnectWithoutRolemasterInput[]
    upsert?: usermasterUpsertWithWhereUniqueWithoutRolemasterInput | usermasterUpsertWithWhereUniqueWithoutRolemasterInput[]
    createMany?: usermasterCreateManyRolemasterInputEnvelope
    set?: usermasterWhereUniqueInput | usermasterWhereUniqueInput[]
    disconnect?: usermasterWhereUniqueInput | usermasterWhereUniqueInput[]
    delete?: usermasterWhereUniqueInput | usermasterWhereUniqueInput[]
    connect?: usermasterWhereUniqueInput | usermasterWhereUniqueInput[]
    update?: usermasterUpdateWithWhereUniqueWithoutRolemasterInput | usermasterUpdateWithWhereUniqueWithoutRolemasterInput[]
    updateMany?: usermasterUpdateManyWithWhereWithoutRolemasterInput | usermasterUpdateManyWithWhereWithoutRolemasterInput[]
    deleteMany?: usermasterScalarWhereInput | usermasterScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedUuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedUuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type formdatamasterCreateWithoutUsermasterInput = {
    feelings: string
    current_mood: string
    current_stress_level: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    health_status?: number | null
  }

  export type formdatamasterUncheckedCreateWithoutUsermasterInput = {
    id?: number
    feelings: string
    current_mood: string
    current_stress_level: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    health_status?: number | null
  }

  export type formdatamasterCreateOrConnectWithoutUsermasterInput = {
    where: formdatamasterWhereUniqueInput
    create: XOR<formdatamasterCreateWithoutUsermasterInput, formdatamasterUncheckedCreateWithoutUsermasterInput>
  }

  export type formdatamasterCreateManyUsermasterInputEnvelope = {
    data: formdatamasterCreateManyUsermasterInput | formdatamasterCreateManyUsermasterInput[]
    skipDuplicates?: boolean
  }

  export type rolemasterCreateWithoutUsermasterInput = {
    id?: string
    name: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type rolemasterUncheckedCreateWithoutUsermasterInput = {
    id?: string
    name: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type rolemasterCreateOrConnectWithoutUsermasterInput = {
    where: rolemasterWhereUniqueInput
    create: XOR<rolemasterCreateWithoutUsermasterInput, rolemasterUncheckedCreateWithoutUsermasterInput>
  }

  export type formdatamasterUpsertWithWhereUniqueWithoutUsermasterInput = {
    where: formdatamasterWhereUniqueInput
    update: XOR<formdatamasterUpdateWithoutUsermasterInput, formdatamasterUncheckedUpdateWithoutUsermasterInput>
    create: XOR<formdatamasterCreateWithoutUsermasterInput, formdatamasterUncheckedCreateWithoutUsermasterInput>
  }

  export type formdatamasterUpdateWithWhereUniqueWithoutUsermasterInput = {
    where: formdatamasterWhereUniqueInput
    data: XOR<formdatamasterUpdateWithoutUsermasterInput, formdatamasterUncheckedUpdateWithoutUsermasterInput>
  }

  export type formdatamasterUpdateManyWithWhereWithoutUsermasterInput = {
    where: formdatamasterScalarWhereInput
    data: XOR<formdatamasterUpdateManyMutationInput, formdatamasterUncheckedUpdateManyWithoutUsermasterInput>
  }

  export type formdatamasterScalarWhereInput = {
    AND?: formdatamasterScalarWhereInput | formdatamasterScalarWhereInput[]
    OR?: formdatamasterScalarWhereInput[]
    NOT?: formdatamasterScalarWhereInput | formdatamasterScalarWhereInput[]
    id?: IntFilter<"formdatamaster"> | number
    user_id?: IntNullableFilter<"formdatamaster"> | number | null
    feelings?: StringFilter<"formdatamaster"> | string
    current_mood?: StringFilter<"formdatamaster"> | string
    current_stress_level?: IntFilter<"formdatamaster"> | number
    created_at?: DateTimeNullableFilter<"formdatamaster"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"formdatamaster"> | Date | string | null
    health_status?: IntNullableFilter<"formdatamaster"> | number | null
  }

  export type rolemasterUpsertWithoutUsermasterInput = {
    update: XOR<rolemasterUpdateWithoutUsermasterInput, rolemasterUncheckedUpdateWithoutUsermasterInput>
    create: XOR<rolemasterCreateWithoutUsermasterInput, rolemasterUncheckedCreateWithoutUsermasterInput>
    where?: rolemasterWhereInput
  }

  export type rolemasterUpdateToOneWithWhereWithoutUsermasterInput = {
    where?: rolemasterWhereInput
    data: XOR<rolemasterUpdateWithoutUsermasterInput, rolemasterUncheckedUpdateWithoutUsermasterInput>
  }

  export type rolemasterUpdateWithoutUsermasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type rolemasterUncheckedUpdateWithoutUsermasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usermasterCreateWithoutFormdatamasterInput = {
    email: string
    password: string
    name: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    rolemaster?: rolemasterCreateNestedOneWithoutUsermasterInput
  }

  export type usermasterUncheckedCreateWithoutFormdatamasterInput = {
    id?: number
    email: string
    password: string
    name: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    role_id?: string | null
  }

  export type usermasterCreateOrConnectWithoutFormdatamasterInput = {
    where: usermasterWhereUniqueInput
    create: XOR<usermasterCreateWithoutFormdatamasterInput, usermasterUncheckedCreateWithoutFormdatamasterInput>
  }

  export type usermasterUpsertWithoutFormdatamasterInput = {
    update: XOR<usermasterUpdateWithoutFormdatamasterInput, usermasterUncheckedUpdateWithoutFormdatamasterInput>
    create: XOR<usermasterCreateWithoutFormdatamasterInput, usermasterUncheckedCreateWithoutFormdatamasterInput>
    where?: usermasterWhereInput
  }

  export type usermasterUpdateToOneWithWhereWithoutFormdatamasterInput = {
    where?: usermasterWhereInput
    data: XOR<usermasterUpdateWithoutFormdatamasterInput, usermasterUncheckedUpdateWithoutFormdatamasterInput>
  }

  export type usermasterUpdateWithoutFormdatamasterInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rolemaster?: rolemasterUpdateOneWithoutUsermasterNestedInput
  }

  export type usermasterUncheckedUpdateWithoutFormdatamasterInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usermasterCreateWithoutRolemasterInput = {
    email: string
    password: string
    name: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    formdatamaster?: formdatamasterCreateNestedManyWithoutUsermasterInput
  }

  export type usermasterUncheckedCreateWithoutRolemasterInput = {
    id?: number
    email: string
    password: string
    name: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    formdatamaster?: formdatamasterUncheckedCreateNestedManyWithoutUsermasterInput
  }

  export type usermasterCreateOrConnectWithoutRolemasterInput = {
    where: usermasterWhereUniqueInput
    create: XOR<usermasterCreateWithoutRolemasterInput, usermasterUncheckedCreateWithoutRolemasterInput>
  }

  export type usermasterCreateManyRolemasterInputEnvelope = {
    data: usermasterCreateManyRolemasterInput | usermasterCreateManyRolemasterInput[]
    skipDuplicates?: boolean
  }

  export type usermasterUpsertWithWhereUniqueWithoutRolemasterInput = {
    where: usermasterWhereUniqueInput
    update: XOR<usermasterUpdateWithoutRolemasterInput, usermasterUncheckedUpdateWithoutRolemasterInput>
    create: XOR<usermasterCreateWithoutRolemasterInput, usermasterUncheckedCreateWithoutRolemasterInput>
  }

  export type usermasterUpdateWithWhereUniqueWithoutRolemasterInput = {
    where: usermasterWhereUniqueInput
    data: XOR<usermasterUpdateWithoutRolemasterInput, usermasterUncheckedUpdateWithoutRolemasterInput>
  }

  export type usermasterUpdateManyWithWhereWithoutRolemasterInput = {
    where: usermasterScalarWhereInput
    data: XOR<usermasterUpdateManyMutationInput, usermasterUncheckedUpdateManyWithoutRolemasterInput>
  }

  export type usermasterScalarWhereInput = {
    AND?: usermasterScalarWhereInput | usermasterScalarWhereInput[]
    OR?: usermasterScalarWhereInput[]
    NOT?: usermasterScalarWhereInput | usermasterScalarWhereInput[]
    id?: IntFilter<"usermaster"> | number
    email?: StringFilter<"usermaster"> | string
    password?: StringFilter<"usermaster"> | string
    name?: StringFilter<"usermaster"> | string
    created_at?: DateTimeNullableFilter<"usermaster"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"usermaster"> | Date | string | null
    role_id?: UuidNullableFilter<"usermaster"> | string | null
  }

  export type formdatamasterCreateManyUsermasterInput = {
    id?: number
    feelings: string
    current_mood: string
    current_stress_level: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    health_status?: number | null
  }

  export type formdatamasterUpdateWithoutUsermasterInput = {
    feelings?: StringFieldUpdateOperationsInput | string
    current_mood?: StringFieldUpdateOperationsInput | string
    current_stress_level?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    health_status?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type formdatamasterUncheckedUpdateWithoutUsermasterInput = {
    id?: IntFieldUpdateOperationsInput | number
    feelings?: StringFieldUpdateOperationsInput | string
    current_mood?: StringFieldUpdateOperationsInput | string
    current_stress_level?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    health_status?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type formdatamasterUncheckedUpdateManyWithoutUsermasterInput = {
    id?: IntFieldUpdateOperationsInput | number
    feelings?: StringFieldUpdateOperationsInput | string
    current_mood?: StringFieldUpdateOperationsInput | string
    current_stress_level?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    health_status?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type usermasterCreateManyRolemasterInput = {
    id?: number
    email: string
    password: string
    name: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type usermasterUpdateWithoutRolemasterInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    formdatamaster?: formdatamasterUpdateManyWithoutUsermasterNestedInput
  }

  export type usermasterUncheckedUpdateWithoutRolemasterInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    formdatamaster?: formdatamasterUncheckedUpdateManyWithoutUsermasterNestedInput
  }

  export type usermasterUncheckedUpdateManyWithoutRolemasterInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsermasterCountOutputTypeDefaultArgs instead
     */
    export type UsermasterCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsermasterCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RolemasterCountOutputTypeDefaultArgs instead
     */
    export type RolemasterCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RolemasterCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usermasterDefaultArgs instead
     */
    export type usermasterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usermasterDefaultArgs<ExtArgs>
    /**
     * @deprecated Use formdatamasterDefaultArgs instead
     */
    export type formdatamasterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = formdatamasterDefaultArgs<ExtArgs>
    /**
     * @deprecated Use rolemasterDefaultArgs instead
     */
    export type rolemasterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = rolemasterDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}